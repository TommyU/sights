---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tommy.
--- DateTime: 2018/6/16 下午4:30
---
local _M = { redis_client = nil, enable_pool = true }
_M.__index = _M

function _M:connect()
    local redis = require "resty.redis"
    self.redis_client = redis:new()
    self.redis_client:set_timeout(1000) -- 1 sec

    local ok, err = self.redis_client:connect("127.0.0.1", 6379)
    if not ok then
        local err_msg = "failed to connect: " .. err
        ngx.log(ngx.ERR, err_msg)
        return false, err_msg
    end
    return true
end

function _M:close(err)
    if self.enable_pool and not err then
        local ok, err = self.redis_client:set_keepalive(100000, 5)
        if not ok then
            local err_msg = "failed to set keepalive: " .. err
            ngx.log(ngx.ERR, err_msg)
            return false, err_msg
        end
    else
        local ok, err = self.redis_client:close()
        if not ok then
            local err_msg = "failed to close redis connection:  " .. err
            ngx.log(ngx.ERR, err_msg)
            return false, err_msg
        end
    end
    return true
end

function _M:get(key)
    assert(self:connect())
    local ret, err = self.redis_client:get(key)
    if err or ret == ngx.null then
        ret = nil
    end
    self:close(err)
    return ret
end

function _M:set(key, value, timeout_in_seconds)
    assert(self:connect())
    self.redis_client:set(key, value)
    ngx.log(ngx.INFO, string.format("time out is %s", timeout_in_seconds))
    local _, err = self.redis_client:expire(key, tostring(timeout_in_seconds))
    self:close(err)
end

function _M:delete(key)
    assert(self:connect())
    local _, err  = self.redis_client:delete(key)
    self:close(err)
end

return _M
